Investigate:
What is convinient?
- fastest?
- shortest?
- incline
- foot traffic

Develop:
Actually find the shortest path
Find the least inclined path

Devise:
Find the shortest distance between 'nodes'/turns/traffic lights
Optimal substructures

Excercise 1.2:
Investigate:
- What are the details of each member

Develop:
-how would everyone communicate 
- what platform is easiest, most effective?

Devise:
Organise a time and method

==========================================================
Excercise 3:
Identify:
What is a fibonacci number, and what does the sequence look like

Develop:
Make a list of fibonacci numbers, along with their nth identifier
Or use a recursive algorithm

Devise:
Write out a list of fibonacci numbers, each with their nth position; for example the number 8 would be the 6th number in the sequence
Develop a recursive algorithm to use n = n-1 + n-2; where n represents the nth number in the sequence

Design:
Make an easy to read table of numbers and identifiers
Code the algorithm to give an output when given a sequence position (nth identifier)
